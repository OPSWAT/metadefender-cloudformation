{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "This template deploys MetaDefender Core in different availability zones in private subnets, which will be managed by MetaDefender Central Management, deployed in a public subnet.",
    "Metadata": {
        "AWS::CloudFormation::Interface": {
            "ParameterGroups": [
                {
                    "Label": {
                        "default": "MetaDefender Configuration"
                    },
                    "Parameters": [
                        "InstanceType",
                        "CoreAMI",
                        "CentralMgmtAMI",
                        "ActivationKey"
                    ]
                },
                {
                    "Label": {
                        "default": "Availability Zone Configuration"
                    },
                    "Parameters": [
                        "AvailabilityZones",
                        "NumberOfAZs"
                    ]
                },
                {
                    "Label": {
                        "default": "Network Configuration"
                    },
                    "Parameters": [
                        "VPCCIDR",
                        "PublicSubnet1CIDR",
                        "CreatePrivateSubnets",
                        "PrivateSubnet1ACIDR",
                        "PrivateSubnet2ACIDR",                        
                        "VPCTenancy"
                    ]
                },
                {
                    "Label": {
                        "default": "Amazon EC2 Configuration"
                    },
                    "Parameters": [
                        "KeyPairName",
                        "NATInstanceType"
                    ]
                }                
            ],
            "ParameterLabels": {                
                "AvailabilityZones": {
                    "default": "Availability Zones"
                },                
                "CreatePrivateSubnets": {
                    "default": "Create private subnets"
                },
                "KeyPairName": {
                    "default": "Key pair name"
                },
                "NATInstanceType": {
                    "default": "NAT instance type"
                },
                "NumberOfAZs": {
                    "default": "Number of Availability Zones"
                },
                "PrivateSubnet1ACIDR": {
                    "default": "Private subnet 1A CIDR"
                },
                "PrivateSubnet1BCIDR": {
                    "default": "Private subnet 1B with dedicated network ACL CIDR"
                },
                "PrivateSubnet2ACIDR": {
                    "default": "Private subnet 2A CIDR"
                },                
                "PublicSubnet1CIDR": {
                    "default": "Public subnet 1 CIDR"
                },
                "VPCCIDR": {
                    "default": "VPC CIDR"
                },
                "VPCTenancy": {
                    "default": "VPC Tenancy"
                }
            }
        }
    },
    "Parameters": {
        "InstanceType": {
            "Type": "String",
            "Default": "m5d.xlarge",
            "AllowedValues": ["m5d.xlarge", "m5d.2xlarge", "c5d.xlarge", "c5d.2xlarge"],
            "Description": "Select desired instance type"
        },
        "CoreAMI" : {
            "Type": "AWS::EC2::Image::Id",
            "Default": "ami-a3ca45dc",
            "Description": "Specify the MetaDefender Core AMI."
        },    
        "CentralMgmtAMI" : {
            "Type": "AWS::EC2::Image::Id",
            "Default": "ami-023a3df077d7eb91f",
            "Description": "Specify the MetaDefender Central Management AMI."
        },                  
        "ActivationKey" : {
            "Type": "String",
            "Default": "xNHZ-9xCW-uESv-qfGH-8J7W-sw1M-Y2vD-aHB8",
            "Description": "MetaDefender Windows License key - please note that same key might have multiple activations."
        },
        "AvailabilityZones": {
            "Description": "List of Availability Zones to use for the subnets in the VPC. Note: The logical order is preserved.",
            "Type": "List<AWS::EC2::AvailabilityZone::Name>"
        },        
        "CreatePrivateSubnets": {
            "AllowedValues": [
                "true",
                "false"
            ],
            "Default": "true",
            "Description": "Set to false to create only public subnets. If false, the CIDR parameters for ALL private subnets will be ignored.",
            "Type": "String"
        },
        "KeyPairName": {
            "Description": "Public/private key pairs allow you to securely connect to your NAT instance after it launches. This is used only if the region does not support NAT gateways.",
            "Type": "AWS::EC2::KeyPair::KeyName"
        },
        "NATInstanceType": {
            "AllowedValues": [
                "t2.nano",
                "t2.micro",
                "t2.small",
                "t2.medium",
                "t2.large",
                "m3.medium",
                "m3.large",
                "m4.large"
            ],
            "Default": "t2.small",
            "Description": "Amazon EC2 instance type for the NAT instances. This is used only if the region does not support NAT gateways.",
            "Type": "String"
        },
        "NumberOfAZs": {
            "AllowedValues": [
                "2",
                "3",
                "4"
            ],
            "Default": "2",
            "Description": "Number of Availability Zones to use in the VPC. This must match your selections in the list of Availability Zones parameter.",
            "Type": "String"
        },
        "PrivateSubnet1ACIDR": {
            "AllowedPattern": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/(1[6-9]|2[0-8]))$",
            "ConstraintDescription": "CIDR block parameter must be in the form x.x.x.x/16-28",
            "Default": "10.0.0.0/19",
            "Description": "CIDR block for private subnet 1A located in Availability Zone 1",
            "Type": "String"
        },        
        "PrivateSubnet2ACIDR": {
            "AllowedPattern": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/(1[6-9]|2[0-8]))$",
            "ConstraintDescription": "CIDR block parameter must be in the form x.x.x.x/16-28",
            "Default": "10.0.32.0/19",
            "Description": "CIDR block for private subnet 2A located in Availability Zone 2",
            "Type": "String"
        },
        "PublicSubnet1CIDR": {
            "AllowedPattern": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/(1[6-9]|2[0-8]))$",
            "ConstraintDescription": "CIDR block parameter must be in the form x.x.x.x/16-28",
            "Default": "10.0.128.0/20",
            "Description": "CIDR block for the public DMZ subnet 1 located in Availability Zone 1",
            "Type": "String"
        },
        "VPCCIDR": {
            "AllowedPattern": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/(1[6-9]|2[0-8]))$",
            "ConstraintDescription": "CIDR block parameter must be in the form x.x.x.x/16-28",
            "Default": "10.0.0.0/16",
            "Description": "CIDR block for the VPC",
            "Type": "String"
        },
        "VPCTenancy": {
            "AllowedValues": [
                "default",
                "dedicated"
            ],
            "Default": "default",
            "Description": "The allowed tenancy of instances launched into the VPC",
            "Type": "String"
        }
    },
    "Mappings": {
        "AWSAMIRegionMap": {
            "AMI": {
                "AWSNATHVM": "amzn-ami-vpc-nat-hvm-2017.03.0.20170401-x86_64-ebs"
            },
            "us-gov-west-1": {
                "AWSNATHVM": "ami-3f0a8f5e"
            }
        }
    },
    "Conditions": {
        "3AZCondition": {
            "Fn::Or": [
                {
                    "Fn::Equals": [
                        {
                            "Ref": "NumberOfAZs"
                        },
                        "3"
                    ]
                },
                {
                    "Condition": "4AZCondition"
                }
            ]
        },
        "4AZCondition": {
            "Fn::Equals": [
                {
                    "Ref": "NumberOfAZs"
                },
                "4"
            ]
        },             
        "GovCloudCondition": {
            "Fn::Equals": [
                {
                    "Ref": "AWS::Region"
                },
                "us-gov-west-1"
            ]
        },
        "NATInstanceCondition": {
            "Fn::And": [
                {
                    "Condition": "PrivateSubnetsCondition"
                },
                {
                    "Condition": "GovCloudCondition"
                }
            ]
        },
        "NATGatewayCondition": {
            "Fn::And": [
                {
                    "Condition": "PrivateSubnetsCondition"
                },
                {
                    "Fn::Not": [
                        {
                            "Condition": "GovCloudCondition"
                        }
                    ]
                }
            ]
        },
        "NATInstance&3AZCondition": {
            "Fn::And": [
                {
                    "Condition": "NATInstanceCondition"
                },
                {
                    "Condition": "3AZCondition"
                }
            ]
        },
        "NATInstance&4AZCondition": {
            "Fn::And": [
                {
                    "Condition": "NATInstanceCondition"
                },
                {
                    "Condition": "4AZCondition"
                }
            ]
        },
        "NATGateway&3AZCondition": {
            "Fn::And": [
                {
                    "Condition": "NATGatewayCondition"
                },
                {
                    "Condition": "3AZCondition"
                }
            ]
        },
        "NATGateway&4AZCondition": {
            "Fn::And": [
                {
                    "Condition": "NATGatewayCondition"
                },
                {
                    "Condition": "4AZCondition"
                }
            ]
        },
        "NVirginiaRegionCondition": {
            "Fn::Equals": [
                {
                    "Ref": "AWS::Region"
                },
                "us-east-1"
            ]
        },
        "PrivateSubnetsCondition": {
            "Fn::Equals": [
                {
                    "Ref": "CreatePrivateSubnets"
                },
                "true"
            ]
        },
        "PrivateSubnets&3AZCondition": {
            "Fn::And": [
                {
                    "Condition": "PrivateSubnetsCondition"
                },
                {
                    "Condition": "3AZCondition"
                }
            ]
        },
        "PrivateSubnets&4AZCondition": {
            "Fn::And": [
                {
                    "Condition": "PrivateSubnetsCondition"
                },
                {
                    "Condition": "4AZCondition"
                }
            ]
        },
        "S3VPCEndpointCondition": {
            "Fn::And": [
                {
                    "Condition": "PrivateSubnetsCondition"
                },
                {
                    "Fn::Not": [
                        {
                            "Fn::Or": [
                                {
                                    "Fn::Equals": [
                                        {
                                            "Ref": "AWS::Region"
                                        },
                                        "us-gov-west-1"
                                    ]
                                },
                                {
                                    "Fn::Equals": [
                                        {
                                            "Ref": "AWS::Region"
                                        },
                                        "cn-north-1"
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    },
    "Resources": {
        "DHCPOptions": {
            "Type": "AWS::EC2::DHCPOptions",
            "Properties": {
                "DomainName": {
                    "Fn::If": [
                        "NVirginiaRegionCondition",
                        "ec2.internal",
                        {
                            "Fn::Join": [
                                "",
                                [
                                    {
                                        "Ref": "AWS::Region"
                                    },
                                    ".compute.internal"
                                ]
                            ]
                        }
                    ]
                },
                "DomainNameServers": [
                    "AmazonProvidedDNS"
                ]
            }
        },
        "VPC": {
            "Type": "AWS::EC2::VPC",
            "Properties": {
                "CidrBlock": {
                    "Ref": "VPCCIDR"
                },
                "InstanceTenancy": {
                    "Ref": "VPCTenancy"
                },
                "EnableDnsSupport": "true",
                "EnableDnsHostnames": "true",
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Ref": "AWS::StackName"
                        }
                    }
                ]
            }
        },
        "VPCDHCPOptionsAssociation": {
            "Type": "AWS::EC2::VPCDHCPOptionsAssociation",
            "Properties": {
                "VpcId": {
                    "Ref": "VPC"
                },
                "DhcpOptionsId": {
                    "Ref": "DHCPOptions"
                }
            }
        },
        "InternetGateway": {
            "Type": "AWS::EC2::InternetGateway",
            "Properties": {
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Ref": "AWS::StackName"
                        }
                    },
                    {
                        "Key": "Network",
                        "Value": "Public"
                    }
                ]
            }
        },
        "VPCGatewayAttachment": {
            "Type": "AWS::EC2::VPCGatewayAttachment",
            "Properties": {
                "VpcId": {
                    "Ref": "VPC"
                },
                "InternetGatewayId": {
                    "Ref": "InternetGateway"
                }
            }
        },
        "PrivateSubnet1A": {
            "Condition": "PrivateSubnetsCondition",
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "VpcId": {
                    "Ref": "VPC"
                },
                "CidrBlock": {
                    "Ref": "PrivateSubnet1ACIDR"
                },
                "AvailabilityZone": {
                    "Fn::Select": [
                        "0",
                        {
                            "Ref": "AvailabilityZones"
                        }
                    ]
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "Private subnet 1A"
                    },
                    {
                        "Key": "Network",
                        "Value": "Private"
                    }
                ]
            }
        },        
        "PrivateSubnet2A": {
            "Condition": "PrivateSubnetsCondition",
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "VpcId": {
                    "Ref": "VPC"
                },
                "CidrBlock": {
                    "Ref": "PrivateSubnet2ACIDR"
                },
                "AvailabilityZone": {
                    "Fn::Select": [
                        "1",
                        {
                            "Ref": "AvailabilityZones"
                        }
                    ]
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "Private subnet 2A"
                    },
                    {
                        "Key": "Network",
                        "Value": "Private"
                    }
                ]
            }
        },
        
        "PublicSubnet1": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "VpcId": {
                    "Ref": "VPC"
                },
                "CidrBlock": {
                    "Ref": "PublicSubnet1CIDR"
                },
                "AvailabilityZone": {
                    "Fn::Select": [
                        "0",
                        {
                            "Ref": "AvailabilityZones"
                        }
                    ]
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "Public subnet 1"
                    },
                    {
                        "Key": "Network",
                        "Value": "Public"
                    }
                ],
                "MapPublicIpOnLaunch": true
            }
        },        
        "PrivateSubnet1ARouteTable": {
            "Condition": "PrivateSubnetsCondition",
            "Type": "AWS::EC2::RouteTable",
            "Properties": {
                "VpcId": {
                    "Ref": "VPC"
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "Private subnet 1A"
                    },
                    {
                        "Key": "Network",
                        "Value": "Private"
                    }
                ]
            }
        },
        "PrivateSubnet1ARoute": {
            "Condition": "PrivateSubnetsCondition",
            "Type": "AWS::EC2::Route",
            "Properties": {
                "RouteTableId": {
                    "Ref": "PrivateSubnet1ARouteTable"
                },
                "DestinationCidrBlock": "0.0.0.0/0",
                "InstanceId": {
                    "Fn::If": [
                        "NATInstanceCondition",
                        {
                            "Ref": "NATInstance1"
                        },
                        {
                            "Ref": "AWS::NoValue"
                        }
                    ]
                },
                "NatGatewayId": {
                    "Fn::If": [
                        "NATGatewayCondition",
                        {
                            "Ref": "NATGateway1"
                        },
                        {
                            "Ref": "AWS::NoValue"
                        }
                    ]
                }
            }
        },
        "PrivateSubnet1ARouteTableAssociation": {
            "Condition": "PrivateSubnetsCondition",
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
                "SubnetId": {
                    "Ref": "PrivateSubnet1A"
                },
                "RouteTableId": {
                    "Ref": "PrivateSubnet1ARouteTable"
                }
            }
        },
        "PrivateSubnet2ARouteTable": {
            "Condition": "PrivateSubnetsCondition",
            "Type": "AWS::EC2::RouteTable",
            "Properties": {
                "VpcId": {
                    "Ref": "VPC"
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "Private subnet 2A"
                    },
                    {
                        "Key": "Network",
                        "Value": "Private"
                    }
                ]
            }
        },
        "PrivateSubnet2ARoute": {
            "Condition": "PrivateSubnetsCondition",
            "Type": "AWS::EC2::Route",
            "Properties": {
                "RouteTableId": {
                    "Ref": "PrivateSubnet2ARouteTable"
                },
                "DestinationCidrBlock": "0.0.0.0/0",
                "InstanceId": {
                    "Fn::If": [
                        "NATInstanceCondition",
                        {
                            "Ref": "NATInstance1"
                        },
                        {
                            "Ref": "AWS::NoValue"
                        }
                    ]
                },
                "NatGatewayId": {
                    "Fn::If": [
                        "NATGatewayCondition",
                        {
                            "Ref": "NATGateway1"
                        },
                        {
                            "Ref": "AWS::NoValue"
                        }
                    ]
                }
            }
        },
        "PrivateSubnet2ARouteTableAssociation": {
            "Condition": "PrivateSubnetsCondition",
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
                "SubnetId": {
                    "Ref": "PrivateSubnet2A"
                },
                "RouteTableId": {
                    "Ref": "PrivateSubnet2ARouteTable"
                }
            }
        },                        
        "PublicSubnetRouteTable": {
            "Type": "AWS::EC2::RouteTable",
            "Properties": {
                "VpcId": {
                    "Ref": "VPC"
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "Public Subnets"
                    },
                    {
                        "Key": "Network",
                        "Value": "Public"
                    }
                ]
            }
        },
        "PublicSubnetRoute": {
            "DependsOn": "VPCGatewayAttachment",
            "Type": "AWS::EC2::Route",
            "Properties": {
                "RouteTableId": {
                    "Ref": "PublicSubnetRouteTable"
                },
                "DestinationCidrBlock": "0.0.0.0/0",
                "GatewayId": {
                    "Ref": "InternetGateway"
                }
            }
        },
        "PublicSubnet1RouteTableAssociation": {
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
                "SubnetId": {
                    "Ref": "PublicSubnet1"
                },
                "RouteTableId": {
                    "Ref": "PublicSubnetRouteTable"
                }
            }
        },        
        "NAT1EIP": {
            "Condition": "PrivateSubnetsCondition",
            "DependsOn": "VPCGatewayAttachment",
            "Type": "AWS::EC2::EIP",
            "Properties": {
                "Domain": "vpc",
                "InstanceId": {
                    "Fn::If": [
                        "NATInstanceCondition",
                        {
                            "Ref": "NATInstance1"
                        },
                        {
                            "Ref": "AWS::NoValue"
                        }
                    ]
                }
            }
        },
        "NAT2EIP": {
            "Condition": "PrivateSubnetsCondition",
            "DependsOn": "VPCGatewayAttachment",
            "Type": "AWS::EC2::EIP",
            "Properties": {
                "Domain": "vpc",
                "InstanceId": {
                    "Fn::If": [
                        "NATInstanceCondition",
                        {
                            "Ref": "NATInstance1"
                        },
                        {
                            "Ref": "AWS::NoValue"
                        }
                    ]
                }
            }
        },
        "NATGateway1": {
            "Condition": "NATGatewayCondition",
            "DependsOn": "VPCGatewayAttachment",
            "Type": "AWS::EC2::NatGateway",
            "Properties": {
                "AllocationId": {
                    "Fn::GetAtt": [
                        "NAT1EIP",
                        "AllocationId"
                    ]
                },
                "SubnetId": {
                    "Ref": "PublicSubnet1"
                }
            }
        },
        "NATInstance1": {
            "Condition": "NATInstanceCondition",
            "DependsOn": "VPCGatewayAttachment",
            "Type": "AWS::EC2::Instance",
            "Properties": {
                "ImageId": {
                    "Fn::FindInMap": [
                        "AWSAMIRegionMap",
                        {
                            "Ref": "AWS::Region"
                        },
                        "AWSNATHVM"
                    ]
                },
                "InstanceType": {
                    "Ref": "NATInstanceType"
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "NAT1"
                    }
                ],
                "NetworkInterfaces": [
                    {
                        "GroupSet": [
                            {
                                "Ref": "NATInstanceSecurityGroup"
                            }
                        ],
                        "AssociatePublicIpAddress": "true",
                        "DeviceIndex": "0",
                        "DeleteOnTermination": "true",
                        "SubnetId": {
                            "Ref": "PublicSubnet1"
                        }
                    }
                ],
                "KeyName": {
                    "Fn::If": [
                        "NATInstanceCondition",
                        {
                            "Ref": "KeyPairName"
                        },
                        {
                            "Ref": "AWS::NoValue"
                        }
                    ]
                },
                "SourceDestCheck": "false"
            }
        },        
        "NATInstanceSecurityGroup": {
            "Condition": "NATInstanceCondition",
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "Enables outbound internet access for the VPC via the NAT instances",
                "VpcId": {
                    "Ref": "VPC"
                },
                "SecurityGroupIngress": [
                    {
                        "IpProtocol": "-1",
                        "FromPort": "1",
                        "ToPort": "65535",
                        "CidrIp": {
                            "Ref": "VPCCIDR"
                        }
                    }
                ]
            }
        },
        "S3VPCEndpoint": {
            "Condition": "S3VPCEndpointCondition",
            "Type": "AWS::EC2::VPCEndpoint",
            "Properties": {
                "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Action": "*",
                            "Effect": "Allow",
                            "Resource": "*",
                            "Principal": "*"
                        }
                    ]
                },
                "RouteTableIds": [
                    {
                        "Ref": "PrivateSubnet1ARouteTable"
                    },
                    {
                        "Ref": "PrivateSubnet2ARouteTable"
                    }                    
                ],
                "ServiceName": {
                    "Fn::Join": [
                        "",
                        [
                            "com.amazonaws.",
                            {
                                "Ref": "AWS::Region"
                            },
                            ".s3"
                        ]
                    ]
                },
                "VpcId": {
                    "Ref": "VPC"
                }
            }
        },
        "MDWindowsEC2AZ1": {
            "Type": "AWS::EC2::Instance",          
            "Properties": {
                "ImageId": {"Ref": "CoreAMI"},
                "IamInstanceProfile": {"Ref": "LambdaInstanceProfile"},
                "InstanceType": {"Ref": "InstanceType"},
                "SecurityGroupIds" : [{ "Fn::GetAtt" : [ "MetaDefenderCoreSG", "GroupId"] }],
                "KeyName": {"Ref": "KeyPairName"},
                "SubnetId": { "Ref" : "PrivateSubnet1A" }                
            },
            "DependsOn": ["DeactivateLambda", "PermissionForEventsToInvokeLambda", "MetaDefenderCoreSG"]
        },
        "MDWindowsEC2AZ2": {
            "Type": "AWS::EC2::Instance",          
            "Properties": {
                "ImageId": {"Ref": "CoreAMI"},
                "IamInstanceProfile": {"Ref": "LambdaInstanceProfile"},
                "InstanceType": {"Ref": "InstanceType"},
                "SecurityGroupIds" : [{ "Fn::GetAtt" : [ "MetaDefenderCoreSG", "GroupId"] }],
                "KeyName": {"Ref": "KeyPairName"},
                "SubnetId": { "Ref" : "PrivateSubnet2A" }
            },
            "DependsOn": ["DeactivateLambda", "PermissionForEventsToInvokeLambda", "MetaDefenderCoreSG"]
        },"MDCentralMgmtWindowsEC2AZ1": {
            "Type": "AWS::EC2::Instance",          
            "Properties": {
                "ImageId": {"Ref": "CentralMgmtAMI"},
                "IamInstanceProfile": {"Ref": "LambdaInstanceProfile"},
                "InstanceType": {"Ref": "InstanceType"},
                "SecurityGroupIds" : [{ "Fn::GetAtt" : [ "MetaDefenderCentralMgmtSG", "GroupId"] }],
                "KeyName": {"Ref": "KeyPairName"},
                "SubnetId": { "Ref" : "PublicSubnet1" },                
                "UserData": { "Fn::Base64": { "Fn::Join": 
                    [
                        "\n", 
                        [
                            "<powershell>",
                            "$lock = \"C:\\Program Files\\OPSWAT\\pwd_ch_lock\"",                                                        
                            {"Fn::Join": ["", ["$ActivationKey = ", "\"", {"Ref": "ActivationKey"}, "\""]]},
                            {"Fn::Join": ["", ["$LambdaFnName = ", "\"", {"Ref": "DeactivateLambda"}, "\""]]},
                            {"Fn::Join": ["", ["$CWEventRule = ", "\"", {"Ref": "DeactivateEventRule"}, "\""]]}, 
                            {"Fn::Join": ["", ["$MDCore1Id = ", "\"", {"Ref": "MDWindowsEC2AZ1"}, "\""]]},
                            {"Fn::Join": ["", ["$MDCore1IP = ", "\"", {"Fn::GetAtt": ["MDWindowsEC2AZ1", "PrivateIp"] }, "\""]]},
                            {"Fn::Join": ["", ["$MDCore2Id = ", "\"", {"Ref": "MDWindowsEC2AZ2"}, "\""]]},
                            {"Fn::Join": ["", ["$MDCore2IP = ", "\"", {"Fn::GetAtt": ["MDWindowsEC2AZ2", "PrivateIp"] }, "\""]]},                           
                            "$cmRestPort = \"8018\"",
                            "$coreRestPort = \"8008\"",
                            "",
                            "function GetMetaDefenderRESTURL() {",
                            "    Param ",
                            "    (",
                            "        [Parameter(Mandatory=$true, Position=0)]",
                            "        [string] $InstanceIP,",
                            "        [Parameter(Mandatory=$true, Position=1)]",
                            "        [string] $RESTPort,",
                            "        [Parameter(Mandatory=$false, Position=2)]",
                            "        [string] $RESTEndpoint",
                            "    )",
                            "    ",
                            "    if (!($RESTEndpoint))",
                            "    {",
                            "        $RESTEndpoint = \"\"",
                            "    }",
                            "",
                            "    return \"http://\" + \"$InstanceIP\" + \":\" + \"$RESTPort\" + \"/\" + $RESTEndpoint",
                            "}",
                            "",
                            "function MetaDefenderLogin() {",
                            "    Param",
                            "    (",
                            "        [Parameter(Mandatory=$true, Position=0)]",
                            "        [string] $username,",
                            "        [Parameter(Mandatory=$true, Position=1)]",
                            "        [string] $password,",
                            "        [Parameter(Mandatory=$true, Position=2)]",
                            "        [string] $restIP,",
                            "        [Parameter(Mandatory=$true, Position=3)]",
                            "        [string] $restPort",
                            "    )",
                            "    $body = @{",
                            "        \"user\"=\"$username\";",
                            "        \"password\"=\"$password\";",
                            "    } | ConvertTo-Json",
                            "    ",
                            "    Write-Host \"Login to $restIP\"",
                            "    Write-Host $body | ConvertFrom-Json",
                            "",
                            "    $loginUrl = GetMetaDefenderRESTURL -InstanceIP $restIP -RESTPort $restPort -RESTEndpoint \"login\"",
                            "    $response = Invoke-WebRequest -UseBasicParsing -Uri $loginUrl -Method POST -Body $body -ContentType \"application/json\" | ConvertFrom-Json    ",
                            "    Write-Host \"Login response: $response\"",
                            "    [Console]::Out.Flush() ",
                            "    return $response.session_id    ",
                            "}",
                            "",
                            "function MetaDefenderChangePassword() {",
                            "    Param",
                            "    (",
                            "        [Parameter(Mandatory=$true, Position=0)]",
                            "        [string] $apikey,",
                            "        [Parameter(Mandatory=$true, Position=1)]",
                            "        [string] $restIP,",
                            "        [Parameter(Mandatory=$true, Position=2)]",
                            "        [string] $restPort,",
                            " 	    [Parameter(Mandatory=$false, Position=3)]",
                            "        [string] $password         ",
                            "    )",
                            "",
                            "    #Set session id as apikey header",
                            "    $headers = @{",
                            "        \"apikey\"=\"$apikey\";",
                            "    }",
                            "    if (!($password)) {",
                            "	    $password = $instance",
                            "    } ",
                            "    #Create new password body",
                            "    $body = @{",
                            "        \"old_password\"=\"admin\";",
                            "        \"new_password\"=\"$password\";",
                            "    } | ConvertTo-Json",
                            "    ",
                            "    Write-Host \"Change Password\"",
                            "    Write-Host $body | ConvertFrom-Json",
                            "    [Console]::Out.Flush() ",
                            "",
                            "    $changePassUrl = GetMetaDefenderRESTURL -InstanceIP $restIP -RESTPort $restPort -RESTEndpoint \"user/changepassword\"",
                            "    #Change password",
                            "    $response = Invoke-WebRequest -UseBasicParsing -Uri $changePassUrl -Method POST -Headers $headers -Body $body -ContentType \"application/json\" | ",
                            "            ConvertFrom-Json    ",
                            "    ",
                            "    Write-Host \"$response\"",
                            "    [Console]::Out.Flush() ",
                            "    return $response",
                            "}",
                            "",
                            "function MetaDefenderActivateLicense () {",
                            "    Param",
                            "    (",
                            "        [Parameter(Mandatory=$true, Position=0)]",
                            "        [string] $apikey,",
                            "        [Parameter(Mandatory=$true, Position=1)]",
                            "        [string] $restIP,",
                            "        [Parameter(Mandatory=$true, Position=2)]",
                            "        [string] $restPort,",
                            "        [Parameter(Mandatory=$true, Position=3)]",
                            "        [string] $instanceId,    ",
                            "        [Parameter(Mandatory=$false, Position=4)]",
                            "        [int] $quantity    ",
                            "    )",
                            "    $Comment = \"MetaDefender AWS Instance: $instanceId\"",
                            "    ",
                            "    #Set session id as apikey header",
                            "    $headers = @{",
                            "        \"apikey\"=\"$apikey\";",
                            "    }",
                            "    ",
                            "    if (!($quantity))",
                            "    {",
                            "        $quantity = 1",
                            "    }",
                            "",
                            "    $body = @{",
                            "        \"activationKey\" = \"$ActivationKey\"; ",
                            "        \"quantity\" = \"$quantity\"; ",
                            "        \"comment\" = \"$Comment\";",
                            "    } | ConvertTo-Json",
                            "    ",
                            "    $activationUrl = GetMetaDefenderRESTURL -InstanceIP $restIP -RESTPort $restPort -RESTEndpoint \"admin/license/activation\"",
                            "    return Invoke-WebRequest -UseBasicParsing $activationUrl -Headers $headers -ContentType \"application/json\" -Method POST -Body $body ",
                            "}",
                            "",
                            "function MetaDefenderLicenseDetails () {",
                            "    Param",
                            "    (",
                            "        [Parameter(Mandatory=$true, Position=0)]",
                            "        [string] $apikey,",
                            "        [Parameter(Mandatory=$true, Position=1)]",
                            "        [string] $restIP,",
                            "        [Parameter(Mandatory=$true, Position=2)]",
                            "        [string] $restPort         ",
                            "    )",
                            "    ",
                            "    #Set session id as apikey header",
                            "    $headers = @{",
                            "        \"apikey\"=\"$apikey\";",
                            "    }",
                            "        ",
                            "    $licenseUrl = GetMetaDefenderRESTURL -InstanceIP $restIP -RESTPort $restPort -RESTEndpoint \"admin/license\"",
                            "    $ActivationDetails = Invoke-WebRequest -UseBasicParsing $licenseUrl -Headers $headers -ContentType \"application/json\" -Method GET    ",
                            "    return $ActivationDetails",
                            "}",
                            "function MetaDefenderCMCreateGroup() {",
                            "    Param ",
                            "    (",
                            "        [Parameter(Mandatory=$true, Position=0)]",
                            "        [string] $apikey",
                            "    )",
                            "    $headers = @{",
                            "        \"apikey\"=\"$apikey\";",
                            "    }",
                            "",
                            "    $body = @{",
                            "        \"name\" = \"MDCoreAWS\";        ",
                            "        \"description\" = \"Distributed MetaDefender Core intances\";        ",
                            "    } | ConvertTo-Json",
                            "    ",
                            "    $createGroupURL = GetMetaDefenderRESTURL -InstanceIP \"localhost\" -RESTPort $cmRestPort -RESTEndpoint \"admin/group\"",
                            "    ",
                            "",
                            "    Invoke-WebRequest -UseBasicParsing $createGroupURL -Headers $headers -Body $body -ContentType \"application/json\" -Method POST        ",
                            "}",
                            "",
                            "function MetaDefenderCMAddInstance () {",
                            "    Param",
                            "    (",
                            "        [Parameter(Mandatory=$true, Position=0)]",
                            "        [string] $apikey,",
                            "        [Parameter(Mandatory=$true, Position=1)]",
                            "        [string] $instanceIP,",
                            "        [Parameter(Mandatory=$true, Position=2)]",
                            "        [string] $instancePass,",
                            "        [Parameter(Mandatory=$true, Position=3)]",
                            "        [string] $restPort,",
                            "        [Parameter(Mandatory=$true, Position=4)]",
                            "        [string] $instanceId         ",
                            "    )  ",
                            "    try {",
                            "        echo \"Login to MetaDefender Core with default credentials\"",
                            "        # login with default credentials",
                            "        $mdCoreSessionId = MetaDefenderLogin -username \"admin\" -password \"admin\" -restIP $instanceIP -restPort $restPort",
                            "        # change the password to instance-id from admin/admin",
                            "        MetaDefenderChangePassword  -apikey $mdCoreSessionId -restIP $instanceIP -restPort $restPort -password $instancePass",
                            "        echo \"Password updated\"",
                            "        # activate MetaDefender Core instances",
                            "        MetaDefenderActivateLicense -apikey $mdCoreSessionId -restIP $instanceIP -restPort $restPort -instanceId \"$instanceId\"",
                            "        #update the lambda variables with the new MetaDefender Core instance",
                            "        AWSUpdateLambdaVariables -FunctionName $LambdaFnName -SessionID $mdCoreSessionId -InstanceID $instanceId -CoreRESTPort $restPort -CoreIP $instanceIP",
                            "        echo \"Lambda Vars updated\"",
                            "        #Set session id as apikey header",
                            "        $headers = @{",
                            "            \"apikey\"=\"$apikey\";",
                            "        }",
                            "        $address = GetMetaDefenderRESTURL -InstanceIP $instanceIP -RESTPort $coreRestPort",
                            "        $description = \"MetaDefender Core - $instanceId\"",
                            "",
                            "        echo \"Address\"",
                            "        echo \"$address\"",
                            "",
                            "        $body = @{",
                            "            \"user\" = \"admin\";",
                            "            \"password\" = \"$instancePass\";",
                            "            \"apikey\" = \"\";",
                            "            \"tags\" = @();",
                            "            \"description\" = \"$description\";",
                            "            \"name\" = \"$instancePass\";",
                            "            \"address\" = \"$address\";",
                            "            \"import\" = $true;",
                            "        } | ConvertTo-Json",
                            "        ",
                            "        echo \"request body\"",
                            "        echo $body | ConvertFrom-Json",
                            "",
                            "        $addInstanceUrl = GetMetaDefenderRESTURL -InstanceIP \"localhost\" -RESTPort $cmRestPort -RESTEndpoint \"admin/group/1/addinstance\"",
                            "        Invoke-WebRequest -UseBasicParsing $addInstanceUrl -Headers $headers -Body $body -ContentType \"application/json\" -Method POST    ",
                            "    }",
                            "    catch {",
                            "        Write-host $_.Exception ",
                            "    }       ",
                            "        ",
                            "}",
                            "function AWSGetInstanceId() {",
                            "    #Get instance name",
                            "    return Invoke-WebRequest -UseBasicParsing -Uri http://169.254.169.254/latest/meta-data/instance-id -Method GET         ",
                            "}",
                            "",
                            "function AWSUpdateLambdaVariables() {",
                            "    Param",
                            "    (",
                            "        [Parameter(Mandatory=$true, Position=0)]",
                            "        [string] $FunctionName,",
                            "        [Parameter(Mandatory=$true, Position=1)]",
                            "        [string] $SessionID,",
                            "        [Parameter(Mandatory=$true, Position=2)]",
                            "        [String] $InstanceID, ",
                            "        [Parameter(Mandatory=$true, Position=3)]",
                            "        [String] $CoreIP, ",
                            "        [Parameter(Mandatory=$true, Position=4)]",
                            "        [String] $CoreRESTPort ",
                            "    )",
                            "",
                            "",
                            "    $ActivationDetails = MetaDefenderLicenseDetails -apikey $SessionID -restIP $CoreIP -restPort $CoreRESTPort | ConvertFrom-Json",
                            "    ",
                            "    $deploymentID = $ActivationDetails.deployment",
                            "    $envVarInstanceId = \"$InstanceID\".replace('-', '_')",
                            "",
                            "    $environmentVariables = @{",
                            "        \"$envVarInstanceId\" = \"$deploymentID\";        ",
                            "    }  ",
                            "",
                            "    $configuration = Get-LMFunctionConfiguration -FunctionName $FunctionName",
                            "    $existingVars = $configuration.Environment.Variables",
                            "    ",
                            "    $jsonVars = $existingVars | ConvertTo-Json",
                            "    Write-Host \"Existing lambda vars: $jsonVars\"",
                            "    [Console]::Out.Flush() ",
                            "",
                            "    $keys = $existingVars.getenumerator() | foreach-object {$_.key}",
                            "    $keys | foreach-object {",
                            "        $key = $_",
                            "        if ($environmentVariables.containskey($key))",
                            "        {",
                            "            $existingVars.remove($key)",
                            "        }",
                            "    }",
                            "",
                            "    $allVars = $existingVars + $environmentVariables   ",
                            "    ",
                            "    $jsonVars = $allVars | ConvertTo-Json",
                            "    Write-Host \"All vars: $jsonVars\"",
                            "    [Console]::Out.Flush()  ",
                            "    ",
                            "    Update-LMFunctionConfiguration -FunctionName $FunctionName -Environment_Variable $allVars",
                            "}",
                            "",
                            "function AWSUpdateCWEventRule() {    ",
                            "    ",
                            "    #update event rule to limit lambda function to this instance",
                            "    $eventRule = Get-CWERule -NamePrefix $CWEventRule",
                            "    $pattern = $eventRule.EventPattern | ConvertFrom-Json",
                            "    $ruleDetails = $pattern.detail",
                            "    ",
                            "    $instanceIds = @($instance, $MDCore1Id, $MDCore2Id)",
                            "    ",
                            "    $ruleDetails | Add-Member -Force -Name 'instance-id' -Type NoteProperty -Value $instanceIds",
                            "    $new_pattern = $pattern | ConvertTo-Json",
                            "",
                            "    # update the rule",
                            "    Write-CWERule -Name $CWEventRule -EventPattern $new_pattern",
                            "}",
                            "",
                            "function HandleException() {",
                            "    Param",
                            "    (",
                            "         [Parameter(Mandatory=$true, Position=0)]",
                            "         [System.Exception] $exception   ",
                            "    )",
                            "",
                            "    $resp = $exception.Response",
                            "",
                            "    if ($resp -eq $null)",
                            "    {",
                            "        Write-host $exception",
                            "    }",
                            "    else",
                            "    {",
                            "        $responseStream = $resp.GetResponseStream()",
                            "        $streamReader = new-object System.IO.StreamReader $responseStream",
                            "        $errorStackTrace = $streamReader.ReadToEnd() ",
                            "        $errorMessage = [string]$Exception.Message",
                            "        $statusCode = $Exception.Response.StatusCode.Value__",
                            "        $errorMessage = \"Unable to activate license $ActivationKey :`nReason: [$statusCode] $errorMessage`n$errorStackTrace\" ",
                            "        Write-Error -message $errorMessage -exception $exception ",
                            "    }",
                            "}",
                            "",
                            "$instance = AWSGetInstanceId",
                            "",
                            "#Test for lock",
                            "if (Test-Path $lock) {",
                            "    ",
                            "    $credentials = @{",
                            "        \"user\"=\"admin\";",
                            "        \"password\"=\"$instance\";",
                            "    }",
                            "    $shouldChangePassword = $false",
                            "} else {",
                            "    $credentials = @{ \"user\"=\"admin\"; \"password\"=\"admin\";}",
                            "    $shouldChangePassword = $true",
                            "}",
                            "",
                            "#check if MetaDefender service is up",
                            "while (-not (Test-NetConnection localhost -Port $cmRestPort | ? { $_.TcpTestSucceeded } )) {",
                            "    #retry every 3 seconds",
                            "    sleep 3",
                            "}",
                            "",
                            "Try",
                            "{  ",
                            "    Write-host \"Login\"         ",
                            "    $sessionId = MetaDefenderLogin -username $credentials.user -password $credentials.password -restIP \"localhost\" -restPort $cmRestPort",
                            "",
                            "    if ($shouldChangePassword) {",
                            "        Write-host \"Need to change password\"",
                            "        [Console]::Out.Flush() ",
                            "        $response = MetaDefenderChangePassword  -apikey \"$sessionId\" -restIP \"localhost\" -restPort \"$cmRestPort\" -password \"$instance\"",
                            "        if ($response) {",
                            "            Write-host \"Create lock file\"",
                            "            [Console]::Out.Flush() ",
                            "            #Create passwd change lock",
                            "            New-Item \"$lock\" -ItemType file",
                            "        }",
                            "        Write-host \"Update lambda Vars\"",
                            "        [Console]::Out.Flush() ",
                            "        AWSUpdateLambdaVariables -FunctionName \"$LambdaFnName\" -SessionID \"$sessionId\" -InstanceID \"$instance\" -CoreIP \"localhost\" -CoreRESTPort \"$cmRestPort\"",
                            "        Write-host \"Activate license key\"",
                            "        [Console]::Out.Flush() ",
                            "        MetaDefenderActivateLicense -apikey \"$sessionId\" -restIP \"localhost\" -restPort \"$cmRestPort\" -instanceId \"$instance\" -quantity 2",
                            "",
                            "        Write-host \"Create MetaDefender Group\"",
                            "        [Console]::Out.Flush() ",
                            "        MetaDefenderCMCreateGroup -apikey \"$sessionId\"",
                            "        Write-host \"Add MetaDefender instance to group\"",
                            "        [Console]::Out.Flush() ",
                            "        MetaDefenderCMAddInstance -apikey \"$sessionId\" -instanceIP \"$MDCore1IP\" -instancePass \"$MDCore1Id\" -instanceId \"$MDCore1Id\" -restPort \"$coreRestPort\"",
                            "        MetaDefenderCMAddInstance -apikey \"$sessionId\" -instanceIP \"$MDCore2IP\" -instancePass \"$MDCore2Id\" -instanceId \"$MDCore2Id\" -restPort \"$coreRestPort\"",
                            "",
                            "        AWSUpdateCWEventRule",
                            "    }",
                            "}",
                            "Catch",
                            "{",
                            "    HandleException -exception $_.Exception ",
                            "}",
                            "</powershell>",
                            "<persist>true</persist>"
                        ]                            
                    ]}
                }
            },
            "DependsOn": ["MDWindowsEC2AZ1", "MDWindowsEC2AZ2", "MetaDefenderCentralMgmtSG"]
        },
        "MetaDefenderCoreSG": {
            "Type" : "AWS::EC2::SecurityGroup",
            "Properties" : {
                "GroupDescription": "Generated security group to allow traffic to MetaDefender REST API",                
                "VpcId": { "Ref": "VPC" },
                "SecurityGroupIngress": [                      
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "8008",
                        "ToPort": "8008",
                        "Description": "REST API",
                        "CidrIp": "0.0.0.0/0"
                    }
                ]
            }
        },
        "MetaDefenderCentralMgmtSG": {
            "Type" : "AWS::EC2::SecurityGroup",
            "Properties" : {
                "GroupDescription": "Generated security group to allow traffic to MetaDefender REST API",
                "VpcId": { "Ref": "VPC" },
                "SecurityGroupIngress": [                      
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "8018",
                        "ToPort": "8018",
                        "Description": "REST API",
                        "CidrIp": "0.0.0.0/0"
                    }, 
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "3389",
                        "ToPort": "3389",
                        "Description": "RDP",
                        "CidrIp": "0.0.0.0/0"
                    }
                ]
            }
        },
        "LambdaAccessRole" : {
            "Type"  : "AWS::IAM::Role",
            "Properties" : {
                "AssumeRolePolicyDocument" : {
                    "Statement" : [ {
                        "Effect" : "Allow",
                        "Principal" : {
                            "Service" : [ "ec2.amazonaws.com" ]
                        },
                        "Action" : [ "sts:AssumeRole" ]
                    } ]
                },
                "Path" : "/"
            }
        },
        
        "LambdaRolePolicies" : {
            "Type" : "AWS::IAM::Policy",
            "Properties" : {
                "PolicyName" : "lambdaaccess",
                "PolicyDocument" : {
                    "Statement" : [ {
                        "Effect" : "Allow",
                        "Action" : ["lambda:*", "events:*"],
                        "Resource" : "*"
                    }]
                },
                "Roles" : [ { "Ref" : "LambdaAccessRole" } ]
            }
        },
        
        "LambdaInstanceProfile" : {
            "Type" : "AWS::IAM::InstanceProfile",
            "Properties" : {
                "Path" : "/",
                "Roles" : [ { "Ref" : "LambdaAccessRole" } ]
            }
        },
        "LambdaExecutionRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [{ "Effect": "Allow", "Principal": {"Service": ["lambda.amazonaws.com"]}, "Action": ["sts:AssumeRole"] }]
              },
              "Path": "/",
              "Policies": [{
                "PolicyName": "deactivateMetaDefender",
                "PolicyDocument": {
                  "Version": "2012-10-17",
                  "Statement": [{ "Effect": "Allow", "Action": ["logs:*"], "Resource": "*" }]
                }
              }]
            }
        },
        "DeactivateLambda": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Handler": "index.handler",
              "Role": { "Fn::GetAtt" : ["LambdaExecutionRole", "Arn"] },
              "Environment": {
                  "Variables": {
                      "ActivationKey": {"Ref": "ActivationKey"}
                  }
              },
              "Code": {
                "ZipFile": {
                  "Fn::Join": [
                    "\n",
                    [
                        "var https = require('https');",
                        "exports.handler = (event, context, callback) => {",
                        "    ",
                        "    var instance = event['detail']['instance-id'].replace(\"-\", \"_\")",
                        "    var licenseKey = process.env.ActivationKey",
                        "    var deploymentID = process.env[instance]",
                        "    ",
                        "    var deactivateURL = `https://activation.dl.opswat.com/deactivation?key=${licenseKey}&deployment=${deploymentID}`",
                        "    ",
                        "    console.log('deactivateURL: ' + deactivateURL)",                        
                        "    https.get(deactivateURL, function(res) {",
                        "        console.log(\"Deactivate response: \" + res.statusCode);",
                        "        context.succeed();        ",
                        "    })",

                        "    callback(null, 'success');",
                        "};"
                    ]
                  ]
                }
              },
              "Runtime": "nodejs6.10"
            },
            "DependsOn": "LambdaExecutionRole"
        },
        "DeactivateEventRule": {
            "Type": "AWS::Events::Rule",
            "Properties": {
                "Description": "MetaDefender Instance stopping or shutting down rule",
                "EventPattern": {
                    "source": [ "aws.ec2" ],
                    "detail-type": [ "EC2 Instance State-change Notification" ],
                    "detail": {
                        "state": [
                            "shutting-down",
                            "stopping"
                        ]                  
                    }
                },
                "State": "ENABLED",
                "Targets": [{
                    "Arn": { "Fn::GetAtt": ["DeactivateLambda", "Arn"] },
                    "Id": "deactivateMetaDefender"
                }]
            },
            "DependsOn": "DeactivateLambda" 
        },
        "PermissionForEventsToInvokeLambda": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
                "FunctionName": { "Ref": "DeactivateLambda" },
                "Action": "lambda:InvokeFunction",
                "Principal": "events.amazonaws.com",
                "SourceArn": { "Fn::GetAtt": ["DeactivateEventRule", "Arn"] }
            },
            "DependsOn": "DeactivateEventRule"            
        }
    },
    "Outputs": {
        "NAT1EIP": {
            "Condition": "PrivateSubnetsCondition",
            "Description": "NAT 1 IP address",
            "Value": {
                "Ref": "NAT1EIP"
            },
            "Export": {
                "Name": {
                    "Fn::Sub": "${AWS::StackName}-NAT1EIP"
                }
            }
        },
        "NAT2EIP": {
            "Condition": "PrivateSubnetsCondition",
            "Description": "NAT 2 IP address",
            "Value": {
                "Ref": "NAT2EIP"
            },
            "Export": {
                "Name": {
                    "Fn::Sub": "${AWS::StackName}-NAT2EIP"
                }
            }
        },
        "PrivateSubnet1ACIDR": {
            "Condition": "PrivateSubnetsCondition",
            "Description": "Private subnet 1A CIDR in Availability Zone 1",
            "Value": {
                "Ref": "PrivateSubnet1ACIDR"
            },
            "Export": {
                "Name": {
                    "Fn::Sub": "${AWS::StackName}-PrivateSubnet1ACIDR"
                }
            }
        },
        "PrivateSubnet1AID": {
            "Condition": "PrivateSubnetsCondition",
            "Description": "Private subnet 1A ID in Availability Zone 1",
            "Value": {
                "Ref": "PrivateSubnet1A"
            },
            "Export": {
                "Name": {
                    "Fn::Sub": "${AWS::StackName}-PrivateSubnet1AID"
                }
            }
        },                
        "PrivateSubnet2ACIDR": {
            "Condition": "PrivateSubnetsCondition",
            "Description": "Private subnet 2A CIDR in Availability Zone 2",
            "Value": {
                "Ref": "PrivateSubnet2ACIDR"
            },
            "Export": {
                "Name": {
                    "Fn::Sub": "${AWS::StackName}-PrivateSubnet2ACIDR"
                }
            }
        },
        "PrivateSubnet2AID": {
            "Condition": "PrivateSubnetsCondition",
            "Description": "Private subnet 2A ID in Availability Zone 2",
            "Value": {
                "Ref": "PrivateSubnet2A"
            },
            "Export": {
                "Name": {
                    "Fn::Sub": "${AWS::StackName}-PrivateSubnet2AID"
                }
            }
        },              
        "PublicSubnet1CIDR": {
            "Description": "Public subnet 1 CIDR in Availability Zone 1",
            "Value": {
                "Ref": "PublicSubnet1CIDR"
            },
            "Export": {
                "Name": {
                    "Fn::Sub": "${AWS::StackName}-PublicSubnet1CIDR"
                }
            }
        },
        "PublicSubnet1ID": {
            "Description": "Public subnet 1 ID in Availability Zone 1",
            "Value": {
                "Ref": "PublicSubnet1"
            },
            "Export": {
                "Name": {
                    "Fn::Sub": "${AWS::StackName}-PublicSubnet1ID"
                }
            }
        },        
        "S3VPCEndpoint": {
            "Condition": "S3VPCEndpointCondition",
            "Description": "S3 VPC Endpoint",
            "Value": {
                "Ref": "S3VPCEndpoint"
            },
            "Export": {
                "Name": {
                    "Fn::Sub": "${AWS::StackName}-S3VPCEndpoint"
                }
            }
        },
        "PrivateSubnet1ARouteTable": {
            "Condition": "PrivateSubnetsCondition",
            "Value": {
                "Ref": "PrivateSubnet1ARouteTable"
            },
            "Description": "Private subnet 1A route table",
            "Export": {
                "Name": {
                    "Fn::Sub": "${AWS::StackName}-PrivateSubnet1ARouteTable"
                }
            }
        },        
        "PrivateSubnet2ARouteTable": {
            "Condition": "PrivateSubnetsCondition",
            "Value": {
                "Ref": "PrivateSubnet2ARouteTable"
            },
            "Description": "Private subnet 2A route table",
            "Export": {
                "Name": {
                    "Fn::Sub": "${AWS::StackName}-PrivateSubnet2ARouteTable"
                }
            }
        },        
        "PublicSubnetRouteTable": {
            "Value": {
                "Ref": "PublicSubnetRouteTable"
            },
            "Description": "Public subnet route table",
            "Export": {
                "Name": {
                    "Fn::Sub": "${AWS::StackName}-PublicSubnetRouteTable"
                }
            }
        },
        "VPCCIDR": {
            "Value": {
                "Ref": "VPCCIDR"
            },
            "Description": "VPC CIDR",
            "Export": {
                "Name": {
                    "Fn::Sub": "${AWS::StackName}-VPCCIDR"
                }
            }
        },
        "VPCID": {
            "Value": {
                "Ref": "VPC"
            },
            "Description": "VPC ID",
            "Export": {
                "Name": {
                    "Fn::Sub": "${AWS::StackName}-VPCID"
                }
            }
        }
    }
}
