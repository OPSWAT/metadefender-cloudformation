{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "Template to launch MetaDefender Windows",
    "Parameters" : {
        "InstanceType": {
            "Type": "String",
            "Default": "m4.xlarge",
            "AllowedValues": ["m4.xlarge", "m4.2xlarge", "m4.4xlarge", "c4.2xlarge", "c4.4xlarge", "c4.8xlarge"],
            "Description": "Select desired instance type"
        },
        "VPC" : {
            "Type": "String",
            "Description": "Specify the desired Virtual Private Cloud."
        },        
        "ActivationKey" : {
            "Type": "String",
            "Description": "MetaDefender Windows License key - please note that same key might have multiple activations."
        },
        "KeyName": {
            "Type": "String",
            "Description": "Specify key pair name used to connect to this instance"
        }
    },
    "Resources": {
        "MetaDefenderWindowsEC2": {
            "Type": "AWS::EC2::Instance",
            "Properties": {
                "ImageId": "ami-223ba25a",
                "IamInstanceProfile": {"Ref": "LambdaInstanceProfile"},
                "InstanceType": {"Ref": "InstanceType"},
                "KeyName": {"Ref": "KeyName"},
                "SecurityGroupIds": [ {"Ref": "MetaDefenderSecurityGroup"} ],
                "UserData": { "Fn::Base64": { "Fn::Join": 
                    [
                        "\n", 
                        [
                            "<powershell>",
                            "$lock = \"C:\\Program Files\\OPSWAT\\pwd_ch_lock\"",                                                        
                            {"Fn::Join": ["", ["$ActivationKey = ", "\"", {"Ref": "ActivationKey"}, "\""]]},
                            {"Fn::Join": ["", ["$LambdaFnName = ", "\"", {"Ref": "DeactivateLambda"}, "\""]]},
                            {"Fn::Join": ["", ["$CWEventRule = ", "\"", {"Ref": "DeactivateEventRule"}, "\""]]},                            
                            "function MetaDefenderLogin() {",
                                "    Param",
                                "    (",
                                "        [Parameter(Mandatory=$true, Position=0)]",
                                "        [string] $username,",
                                "        [Parameter(Mandatory=$true, Position=1)]",
                                "        [string] $password",
                                "    )",
                                "    $body = @{",
                                "        \"user\"=\"$username\";",
                                "        \"password\"=\"$password\";",
                                "    } | ConvertTo-Json",
                                "",
                                "    $response = Invoke-WebRequest -UseBasicParsing -Uri http://localhost:8008/login -Method POST -Body $body -ContentType \"application/json\" | ConvertFrom-Json    ",
                                "    return $response.session_id    ",
                                "}",
                                "",
                                "function MetaDefenderChangePassword() {",
                                "    Param",
                                "    (",
                                "        [Parameter(Mandatory=$true, Position=0)]",
                                "        [string] $apikey         ",
                                "    )",
                                "",
                                "    #Set session id as apikey header",
                                "    $headers = @{",
                                "        \"apikey\"=\"$apikey\";",
                                "    }",
                                "        ",
                                "    #Create new password body",
                                "    $body = @{",
                                "        \"old_password\"=\"admin\";",
                                "        \"new_password\"=\"$instance\";",
                                "    } | ConvertTo-Json",
                                "    ",
                                "    #Change password",
                                "    return Invoke-WebRequest -UseBasicParsing -Uri http://localhost:8008/user/changepassword -Method POST -Headers $headers -Body $body -ContentType \"application/json\" | ",
                                "            ConvertFrom-Json    ",
                                "}",
                                "",
                                "function MetaDefenderActivateLicense () {",
                                "    Param",
                                "    (",
                                "        [Parameter(Mandatory=$true, Position=0)]",
                                "        [string] $apikey         ",
                                "    )",
                                "    $Comment = \"MetaDefender AWS Instance: $instance\"",
                                "    ",
                                "    #Set session id as apikey header",
                                "    $headers = @{",
                                "        \"apikey\"=\"$apikey\";",
                                "    }",
                                "    ",
                                "    $body = @{",
                                "        \"activationKey\" = \"$ActivationKey\"; ",
                                "        \"quantity\" = \"1\"; ",
                                "        \"comment\" = \"$Comment\";",
                                "    } | ConvertTo-Json",
                                "    return Invoke-WebRequest -UseBasicParsing http://localhost:8008/admin/license/activation -Headers $headers -ContentType \"application/json\" -Method POST -Body $body ",
                                "}",
                                "",
                                "function MetaDefenderLicenseDetails () {",
                                "    Param",
                                "    (",
                                "        [Parameter(Mandatory=$true, Position=0)]",
                                "        [string] $apikey         ",
                                "    )",
                                "    ",
                                "    #Set session id as apikey header",
                                "    $headers = @{",
                                "        \"apikey\"=\"$apikey\";",
                                "    }",
                                "    ",
                                "    $ActivationDetails = Invoke-WebRequest -UseBasicParsing http://localhost:8008/admin/license -Headers $headers -ContentType \"application/json\" -Method GET    ",
                                "    return $ActivationDetails",
                                "}",
                                "",
                                "function AWSGetInstanceId() {",
                                "    #Get instance name",
                                "    return Invoke-WebRequest -UseBasicParsing -Uri http://169.254.169.254/latest/meta-data/instance-id -Method GET         ",
                                "}",
                                "",
                                "function AWSUpdateLambdaVariables() {",
                                "    Param",
                                "    (",
                                "        [Parameter(Mandatory=$true, Position=0)]",
                                "        [string] $FunctionName, ",
                                "        [Parameter(Mandatory=$true, Position=1)]",
                                "        [hashtable] $EnvironmentVariables,    ",
                                "        [Parameter(Mandatory=$true, Position=2)]",
                                "        [String] $InstanceID          ",
                                "    )",
                                "",
                                "    Update-LMFunctionConfiguration -FunctionName $FunctionName -Environment_Variable $EnvironmentVariables",
                                "",
                                "    #update event rule to limit lambda function to this instance",
                                "    $eventRule = Get-CWERule -NamePrefix $CWEventRule",
                                "    $pattern = $eventRule.EventPattern",
                                "    $instanceFilter = ",
                                "    ",
                                "    $new_pattern = $pattern.replace('{\"state\"', '{\"instance-id\": [\"' + $InstanceID + '\"],\"state\"')",
                                "",
                                "    # update the rule",
                                "    Write-CWERule -Name $CWEventRule -EventPattern $new_pattern",
                                "}",
                                "",
                                "function HandleException() {",
                                "    Param",
                                "    (",
                                "         [Parameter(Mandatory=$true, Position=0)]",
                                "         [System.Exception] $exception   ",
                                "    )",
                                "",
                                "    $resp = $exception.Response",
                                "",
                                "    if ($resp -eq $null)",
                                "    {",
                                "        Write-host $exception",
                                "    }",
                                "    else",
                                "    {",
                                "        $responseStream = $resp.GetResponseStream()",
                                "        $streamReader = new-object System.IO.StreamReader $responseStream",
                                "        $errorStackTrace = $streamReader.ReadToEnd() ",
                                "        $errorMessage = [string]$Exception.Message",
                                "        $statusCode = $Exception.Response.StatusCode.Value__",
                                "        $errorMessage = \"Unable to activate license $ActivationKey :`nReason: [$statusCode] $errorMessage`n$errorStackTrace\" ",
                                "        Write-Error -message $errorMessage -exception $exception ",
                                "    }",
                                "}",
                                "",
                                "$instance = AWSGetInstanceId",
                                "",
                                "#Test for lock",
                                "if (Test-Path $lock) {",
                                "    ",
                                "    $credentials = @{",
                                "        \"user\"=\"admin\";",
                                "        \"password\"=\"$instance\";",
                                "    }",
                                "    $shouldChangePassword = $false",
                                "} else {",
                                "    $credentials = @{ \"user\"=\"admin\"; \"password\"=\"admin\";}",
                                "    $shouldChangePassword = $true",
                                "}",
                                "",
                                "#check if MetaDefender service is up",
                                "while (-not (Test-NetConnection localhost -Port 8008 | ? { $_.TcpTestSucceeded } )) {",
                                "    #retry every 3 seconds",
                                "    sleep 3",
                                "}",
                                "",
                                "Try",
                                "{           ",
                                "    $sessionId = MetaDefenderLogin -username $credentials.user -password $credentials.password",
                                "",
                                "    if ($shouldChangePassword) {",
                                "        $response = MetaDefenderChangePassword  -apikey $sessionId",
                                "        if ($response) {",
                                "            #Create passwd change lock",
                                "            New-Item \"$lock\" -ItemType file",
                                "        }",
                                "    }",
                                "    ",
                                "    MetaDefenderActivateLicense -apikey $sessionId",
                                "    $ActivationDetails = MetaDefenderLicenseDetails -apikey $sessionId | ConvertFrom-Json",
                                "",
                                "    # $S3AccessCredentials = AWSS3Credentials",
                                "    $deploymentID = $ActivationDetails.deployment",
                                "",
                                "    $environmentVariables = @{",
                                "        \"DeploymentID\" = \"$deploymentID\";",
                                "        \"ActivationKey\" = \"$ActivationKey\";",
                                "    }    ",
                                "",
                                "    AWSUpdateLambdaVariables -FunctionName $LambdaFnName -EnvironmentVariables $environmentVariables -InstanceID $instance",
                                "}",
                                "Catch",
                                "{",
                                "    HandleException -exception $_.Exception ",
                                "}",
                                "</powershell>",
                                "<persist>true</persist>"
                            ]                            
                    ]}
                }
            },
            "DependsOn": ["DeactivateLambda", "PermissionForEventsToInvokeLambda"]
        },
        "MetaDefenderSecurityGroup": {
            "Type" : "AWS::EC2::SecurityGroup",
            "Properties" : {
                "GroupDescription": "Generated security group to allow traffic to MetaDefender REST API",
                "GroupName": "MetaDefenderSecurityGroup",
                "VpcId": { "Ref": "VPC" },
                "SecurityGroupIngress": [                      
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "8008",
                        "ToPort": "8008",
                        "Description": "REST API",
                        "CidrIp": "0.0.0.0/0"
                    }
                ]
            }
        },
        "LambdaAccessRole" : {
            "Type"  : "AWS::IAM::Role",
            "Properties" : {
                "AssumeRolePolicyDocument" : {
                    "Statement" : [ {
                        "Effect" : "Allow",
                        "Principal" : {
                            "Service" : [ "ec2.amazonaws.com" ]
                        },
                        "Action" : [ "sts:AssumeRole" ]
                    } ]
                },
                "Path" : "/"
            }
        },
        
        "LambdaRolePolicies" : {
            "Type" : "AWS::IAM::Policy",
            "Properties" : {
                "PolicyName" : "lambdaaccess",
                "PolicyDocument" : {
                    "Statement" : [ {
                        "Effect" : "Allow",
                        "Action" : ["lambda:*", "events:*"],
                        "Resource" : "*"
                    }]
                },
                "Roles" : [ { "Ref" : "LambdaAccessRole" } ]
            }
        },
        
        "LambdaInstanceProfile" : {
            "Type" : "AWS::IAM::InstanceProfile",
            "Properties" : {
                "Path" : "/",
                "Roles" : [ { "Ref" : "LambdaAccessRole" } ]
            }
        },
        "LambdaExecutionRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [{ "Effect": "Allow", "Principal": {"Service": ["lambda.amazonaws.com"]}, "Action": ["sts:AssumeRole"] }]
              },
              "Path": "/",
              "Policies": [{
                "PolicyName": "deactivateMetaDefender",
                "PolicyDocument": {
                  "Version": "2012-10-17",
                  "Statement": [{ "Effect": "Allow", "Action": ["logs:*"], "Resource": "*" }]
                }
              }]
            }
        },
        "DeactivateLambda": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Handler": "index.handler",
              "Role": { "Fn::GetAtt" : ["LambdaExecutionRole", "Arn"] },
              "Environment": {
                  "Variables": {
                      "ActivationKey": {"Ref": "ActivationKey"},
                      "DeploymentID": "N/A"
                  }
              },
              "Code": {
                "ZipFile": {
                  "Fn::Join": [
                    "\n",
                    [
                        "var https = require('https');",
                        "exports.handler = (event, context, callback) => {",
                        "    ",
                        "    var licenseKey = process.env.ActivationKey",
                        "    var deploymentID = process.env.DeploymentID",
                        "    ",
                        "    var deactivateURL = `https://activation.dl.opswat.com/deactivation?key=${licenseKey}&deployment=${deploymentID}`",
                        "    ",
                        "    console.log('deactivateURL: ' + deactivateURL)",                        
                        "    https.get(deactivateURL, function(res) {",
                        "        console.log(\"Deactivate response: \" + res.statusCode);",
                        "        context.succeed();        ",
                        "    })",

                        "    callback(null, 'success');",
                        "};"
                    ]
                  ]
                }
              },
              "Runtime": "nodejs6.10"
            },
            "DependsOn": "LambdaExecutionRole"
        },
        "DeactivateEventRule": {
            "Type": "AWS::Events::Rule",
            "Properties": {
                "Description": "MetaDefender Instance stopping or shutting down rule",
                "EventPattern": {
                    "source": [ "aws.ec2" ],
                    "detail-type": [ "EC2 Instance State-change Notification" ],
                    "detail": {
                        "state": [
                            "shutting-down",
                            "stopping"
                        ]                  
                    }
                },
                "State": "ENABLED",
                "Targets": [{
                    "Arn": { "Fn::GetAtt": ["DeactivateLambda", "Arn"] },
                    "Id": "deactivateMetaDefender"
                }]
            },
            "DependsOn": "DeactivateLambda" 
        },
        "PermissionForEventsToInvokeLambda": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
                "FunctionName": { "Ref": "DeactivateLambda" },
                "Action": "lambda:InvokeFunction",
                "Principal": "events.amazonaws.com",
                "SourceArn": { "Fn::GetAtt": ["DeactivateEventRule", "Arn"] }
            },
            "DependsOn": "DeactivateEventRule"            
        }
    },
    "Outputs": {
        "InstanceId": {
            "Description": "MetaDefender Instance Identifier",
            "Value": { "Ref": "MetaDefenderWindowsEC2" }
        },
        "PublicIP": {
            "Description": "MetaDefender Public IP",
            "Value": { "Fn::GetAtt": [ "MetaDefenderWindowsEC2", "PublicIp" ] }
        },
        "PublicDNS": {
            "Description": "MetaDefender Public DNS",
            "Value": { "Fn::GetAtt": [ "MetaDefenderWindowsEC2", "PublicDnsName" ] }
        }
    }    
}